DBIx::Connector - centralize and personalize database connection parameters

The database connector is a Perl module that can be used to get a DBI
database handle without having to hard-code any of the database connection
parameters into your Perl scripts or modules.  See below under ADVANTAGES
for more information.

INSTALLATION

ALWAYS use the standard Perl installation process:

    perl Makefile.PL
    make
    make test
    make install

and answer all of the questions carefully.  This will ensure that your
standard directories are configured correctly, and if the tests run
cleanly, your environment is ready for use with DBIx::Connector.

Note that many of the tests require the Test::Cmd module.  It is only used
during testing, and if it is not installed, the only impact will be that
some tests are skipped.

POST-INSTALL SETUP

There is some additional setup that must be done before you can start using
the database connector: 1) setting filesystem permissions to control access
to shared directories and 2) creating realm files.

PERMISSIONS

    Passwords are stored in the clear in realm files.  DBIx::Connector
    relies on your operating system's filesystem permissions to protect the
    username and password information in the realm files.  IT IS YOUR
    RESPONSIBILITY to set these permissions appropriately.

    One of the decisions you make during the installation procedure is
    where you want to keep the shared realm files that hold the database
    connection parameters.  When you install DBIx::Connector, this
    directory is created, using the umask and other information of the user
    performing the installation (usually root).

    You must decide who should have the ability to create and modify shared
    database realm files and set the permissions on this directory
    accordingly.  Everyone who uses the DBIx::Connector will need the
    ability to access (in Unix, the 'execute' bit) this directory, and to
    read the particular realm files that they are allowed to use.

    The decision to store passwords in the clear was made after much
    deliberation.  Since the whole point of DBIx::Connector is to obtain
    access to database credentials without further interaction, the module
    must contain all of the information needed to decrypt the passwords,
    and thus any encryption would be illusory.  It would only make it more
    difficult to update the realm files manually.

REALM FILES

    Database realm connection files are most easily created using the
    "dbc_realm" script installed along with the DBIx::Connector.  See the
    dbc_realm man page for details.

    When users want to change their passwords, this process is simplified
    by the "dbc_passwd" script, which changes both the database password and
    the realm file at the same time.  See the dbc_passwd man page for details.
    
    Use of the helper programs is optional.  A realm file is simply a text
    file, and you can create and update them manually if you prefer.  A realm
    file holds all of the information that DBI will need to connect to your
    database and create a database handle.

    The format of the file is a series of KEY=VALUE lines.  The following
    values, and only these values, are expected:

       DBD=Sybase

       The database-dependent (DBD) driver to use for this connection.
       Always required.

       SERVER=SYBASE

       The connect string for the database server to connect to.  The
       values allowed here depend on the DBD driver that you are using.
       Some database servers will not use this parameter.  If yours does
       not, leave it blank.  In general, this parameter corresponds to
       everything that appears in the DBI connection string after the
       second colon: e.g. "dbi:DriverName:$SERVER".

       USER=username

       The username to use when connecting to the database.  Most databases
       require a username for authentication; if yours doesn't, you can
       leave this blank.

       PASS=password

       The password that goes with the above username.  Most databases
       require a password for authentication; if yours doesn't, you can
       leave this blank.

       DATABASE=pubs2

       The name of the database on the database server to use.  If you
       specify a name here, a "use database" command will be issued, to
       switch to the database you specify.  If your database server does
       not host multiple databases or does not support the "use" statement,
       leave this parameter blank.

USING DBIx::Connector

For complete instructions, see the man page or perldoc for DBIx::Connector
and its related programs, dbc_realm and dbc_passwd.  In brief,

    use DBIx::Connector;
    my $dbc = new DBIx::Connector(-realm => 'pubs2');
    my $dbh = $dbc->connect();
    ... (continue, using DBI handle in the normal way; don't disconnect)

ADVANTAGES

By keeping the database connection information in private or shared realm
files, DBIx::Connector makes it easy to:

    * Perform Database Migration

       Change the database that any number of scripts use by editing a
       single file.  Ditto for changing usernames and passwords.

    * Use the Same Code in Development and Production

       You can define the same realm name differently on development and
       production servers, so that each accesses a different database
       without changing a single line of code and without setting any
       environment variables.

    * Simplify Security

       Allow users to connect to the database with their own username and
       database-enforced permissions without having to supply their
       password every time they run the script.

       Also allows you to define a level of shared access (e.g. a read-
       only connection) to be used as the default if no user-specific
       permissions are granted.

    * Cache Database Connections

       Save time by avoiding having to make a new connection to the
       database for each database access, without having to pass a DBI
       database handle around from one routine to another.  The
       DBIx::Connector only makes a database connection if you need one,
       so if your script never uses the database, your program takes no
       performance hit.

TROUBLESHOOTING

Normally, the Connector object manages the lifetime of the DBI connection
handle.  When the Connector object goes out of scope, the DBI handle is
disconnected.  Typically, the Connector is a global variable, or top-level
lexical that doesn't go out of scope until the program terminates.  That
means this won't work:

    # Warning: incorrect code
    sub get_dbh {
        my $dbc = DBIx::Connector->new(-realm => 'mydb');
        return $dbc->connect();
    }

because the $dbc object is destroyed at the end of the subroutine, and thus
the DBI handle returned from the connect() method is disconnected from the
database.

There are two ways of avoiding this problem.  The preferred way is to make
the Connector a global, and just call the connect() method on this global
when you want a DBI handle, e.g.

    our $Dbc = DBIx::Connector->new(-realm => 'mydb');
    ...
    my $dbh = $Dbc->connect();

The other way is to manage the lifetime of the DBI handle on your own.  To do
this, set the -no_disconnect flag when you create the DBIx::Connector object.
By doing this, you give up many of the benefits of DBIx::Connector, but if
this is what you want, I won't stop you--that isn't the Perl way.

AUTHORS

DBIx::Connector was originally created by Anthony Masiello, and was later
modified by Ken Trout and Peter Chines to support private realm files.  The
current version is a near-complete rewrite by Peter, to make installation
and maintenance easier and allow the software to be more easily extended to
work with different database servers.

    Peter S. Chines <pchines@psc.web66.com>
    Anthony J. Masiello <anthony@masiello.org>
    Kenneth Trout <mizumi@fred.net>

BUGS

This is beta-release software.  It has been extensively tested and used in our
own production environments (Linux and Solaris, primarily), but it has not been
widely used, especially under the Windows operating system.  Please direct
questions, patches, etc. to Peter at the address above.

LICENSE

Copyright (c) 2002-2004, Peter S. Chines.  You may freely use, modify, and
distribute this software under the same terms as Perl itself.
